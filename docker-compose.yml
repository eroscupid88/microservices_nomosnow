version: '3.9'


services:
  ## optional for using mysql for keycloak
#  mysql-keycloak:
#    image: mysql:latest
#    container_name: mysql-keycloak
#    restart: always
#    environment:
#      MYSQL_ROOT_PASSWORD: root
#      MYSQL_DATABASE: keycloak
#      MYSQL_USER: keycloak
#      MYSQL_PASSWORD: keycloak
#    expose:
#      - 3306
#    ports:
#      - 3306:3306
#    volumes:
#      - my-db:/var/lib/mysql
#    networks:
#      - backend
  organization_database:
    image: postgres:latest
    container_name: postgres_organization_database
    restart: on-failure:5
    command: -p 5001
    expose:
      - "5001"
    ports:
      - "5001:5001"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB:       "sporteventorganization"
    volumes:
      - ./postgresql/organization_init.sql:/docker-entrypoint-initdb.d/1-organization_init.sql
      - ./postgresql/organization_data.sql:/docker-entrypoint-initdb.d/2-organization_data.sql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      backend:
        aliases:
          - "organization_database"
  sportevent_database:
    image: postgres:latest
    container_name: postgres_sportevent_database
    restart: on-failure:5
    command: -p 5000
    expose:
      - "5000"
    ports:
      - "5000:5000"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB:       "sporteventservice"
    volumes:
      - ./postgresql/sportevent_init.sql:/docker-entrypoint-initdb.d/1-sportevent_init.sql
      - ./postgresql/sportevent_data.sql:/docker-entrypoint-initdb.d/2-sportevent_data.sql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      backend:
        aliases:
          - "sportevent_databases"

  configserver:
    build: ./configserver
    image: configserver:latest
    container_name: configServer
    ports:
      - "7071:7071"
    networks:
      backend:
        aliases:
          - "configserver"
  eurekaserver:
    build: ./eureka-server
    image: eurekaserver:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    container_name: eurekaServer
    ports:
      - "7070:7070"
    depends_on:
      - organization_database
      - sportevent_database
      - configserver
    networks:
      backend:
        aliases:
          - "eurekaserver"
  gatewayserver:
    build: ./gateway-server
    image: gatewayserver:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    container_name: gatewayServer
    ports:
      - "7072:7072"
    environment:
      PROFILE: "dev"
      SERVER_PORT: "7072"
      CONFIGSERVER_URI: "http://configserver:7071"
      EUREKASERVER_URI: "http://eurekaserver:7070/eureka/"
      EUREKASERVER_PORT: "7070"
      CONFIGSERVER_PORT: "7071"
    depends_on:
      - organization_database
      - sportevent_database
      - configserver
      - eurekaserver
    networks:
      backend:
        aliases:
          - "gatewayserver"
#  keycloak:
#    build: ./keycloak-script
#    image: jboss/keycloak
#    container_name: keycloak
#    deploy:
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 10
#        window: 120s
#    environment:
#      DB_VENDOR: MYSQL
#      DB_ADDR: mysql-keycloak
#      DB_PORT: 3306
#      DB_DATABASE: keycloak
#      DB_USER: keycloak
#      DB_PASSWORD: keycloak
##      KEYCLOAK_FRONTEND_URL: http://keycloak:8080/auth/
#      PROXY_ADDRESS_FORWARDING: "true"
#    ports:
#      - '8080:8080'
#    depends_on:
#      - mysql-keycloak
#    networks:
#      backend:
#        aliases:
#          - "keycloak"

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeperServer
    ports:
      - 2181:2181
    networks:
      backend:
        aliases:
          - "zookeeper"
  kafkaserver:
    image: wurstmeister/kafka:latest
    container_name: kafkaServer
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - "kafka"
  redisserver:
    image: redis:alpine
    container_name: redisServer
    ports:
      - 6379:6379
    networks:
      backend:
        aliases:
          - "redis"
  sporteventservice:
    build: ./sport_event_service
    image: sport-event-service:latest
    container_name: sport-event-service
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:7071"
      CONFIGSERVER_PORT:   "7071"
      DATABASESERVER_PORT: "5000"
    depends_on:
      - sportevent_database
      - configserver
#      - kafkaserver
    ports:
      - "7000:7000"
    networks:
      backend:
        aliases:
          - "sporteventservice"
#
  sportorganizationservice:
    build: ./sport-organization-service
    image: sport-organization-service:latest
    container_name: sport-organization-service
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:7071"
      CONFIGSERVER_PORT:   "7071"
      DATABASESERVER_PORT: "5001"
    depends_on:
      - organization_database
      - configserver
#      - kafkaserver
    ports:
      - "7001:7001"
    networks:
      backend:
        aliases:
        - "sportorganizationservice"

networks:
  backend:
    driver: bridge
  keycloak:
    driver: bridge
volumes:
  my-db:
    driver: local

