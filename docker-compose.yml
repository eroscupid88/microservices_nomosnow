version: '3.9'


services:
  ## optional for using mysql for keycloak
 mysql-keycloak:
   image: mysql:latest
   container_name: mysql-keycloak
   restart: always
   environment:
     MYSQL_ROOT_PASSWORD: root
     MYSQL_DATABASE: keycloak
     MYSQL_USER: keycloak
     MYSQL_PASSWORD: keycloak
   expose:
     - 3306
   ports:
     - 3306:3306
   volumes:
     - my-db:/var/lib/mysql
   networks:
     - backend
#  if using mysql8
#  mysql8:
#    build:
#      context: ./mysql-eventuate-cdc
#      dockerfile: Dockerfile-mysql8
#    image: eventuateio/eventuate-mysql8
#    ports:
#      - 3307:3307
#    environment:
#      - MYSQL_ROOT_PASSWORD=rootpassword
#      - MYSQL_USER=mysqluser
#      - MYSQL_PASSWORD=mysqlpw
#      - USE_DB_ID=true
#      - USE_JSON_PAYLOAD_AND_HEADERS=${USE_JSON_PAYLOAD_AND_HEADERS}

  zookeeper:
    image: confluentinc/cp-zookeeper:5.2.4
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      KAFKA_HEAP_OPTS: -Xmx64m
    networks:
      backend:
        aliases:
          - "zookeeper"

  kafka:
    image: "confluentinc/cp-kafka:5.2.4"
    container_name: kafka
    ports:
      - 9092:9092
      - 29092:29092
    depends_on:
      - zookeeper
    environment:
      KAFKA_LISTENERS: LC://kafka:29092,LX://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: LC://kafka:29092,LX://${DOCKER_HOST_IP:-localhost}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LC:PLAINTEXT,LX:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LC
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 60000
      KAFKA_HEAP_OPTS: -Xmx192m
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      backend:
        aliases:
          - "kafka"
  eventuate-cdc-service:
    image: eventuateio/eventuate-cdc-service
    container_name: eventuate-cdc-service
    ports:
      - "8099:8080"
    links:
      - postgres_database
      - kafka
      - zookeeper
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_database/eventuate
      SPRING_DATASOURCE_USERNAME: eventuate
      SPRING_DATASOURCE_PASSWORD: eventuate
      SPRING_DATASOURCE_TEST_ON_BORROW: "true"
      SPRING_DATASOURCE_VALIDATION_QUERY: SELECT 1
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181
      EVENTUATELOCAL_CDC_READER_NAME: ClientEventuateTram
      EVENTUATELOCAL_CDC_MYSQL_BINLOG_CLIENT_UNIQUE_ID: 2
      EVENTUATE_OUTBOX_ID: 1
      SPRING_PROFILES_ACTIVE: EventuatePolling
      EVENTUATE_CDC_TYPE: EventuateTram
      JAVA_OPTS: -Xmx64m
#      EVENTUATE_CDC_PIPELINE_PIPELINE1_TYPE: eventuate-tram
#      EVENTUATE_CDC_PIPELINE_PIPELINE1_READER: reader1
#      EVENTUATE_CDC_PIPELINE_PIPELINE1_EVENTUATEDATABASESCHEMA: sport-events-service
    networks:
      backend:
        aliases:
          - "eventuate-cdc-service"

  postgres_database:
    build:
      context: ./postgresql-eventuate-cdc
    image: eventuateio/eventuate-tram-sagas-postgres
    container_name: postgres_database
    restart: on-failure
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: eventuate
      POSTGRES_PASSWORD: eventuate
      USE_DB_ID: "true"
    volumes:
      - ./postgresql/organization_init.sql:/docker-entrypoint-initdb.d/1-organization_init.sql
      - ./postgresql/organization_data.sql:/docker-entrypoint-initdb.d/2-organization_data.sql
      - ./postgresql/sportevent_init.sql:/docker-entrypoint-initdb.d/1-sportevent_init.sql
      - ./postgresql/sportevent_data.sql:/docker-entrypoint-initdb.d/2-sportevent_data.sql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      backend:
        aliases:
          - "database"
  configserver:
    build: ./configserver
    image: configserver:latest
    container_name: configServer
    environment:
      PROFILE: "dev"
    ports:
      - "7071:7071"
    networks:
      backend:
        aliases:
          - "configserver"
  eurekaserver:
    build: ./eureka-server
    image: eurekaserver:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    container_name: eurekaServer
    ports:
      - "7070:7070"
    depends_on:
      - postgres_database
      - configserver
    networks:
      backend:
        aliases:
          - "eurekaserver"
  gatewayserver:
    build: ./gateway-server
    image: gatewayserver:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    container_name: gatewayServer
    ports:
      - "7072:7072"
    environment:
      PROFILE: "dev"
      SERVER_PORT: "7072"
      CONFIGSERVER_URI: "http://configserver:7071"
      EUREKASERVER_URI: "http://eurekaserver:7070/eureka/"
      EUREKASERVER_PORT: "7070"
      CONFIGSERVER_PORT: "7071"
    depends_on:
      - postgres_database
      - configserver
      - eurekaserver
    networks:
      backend:
        aliases:
          - "gatewayserver"
#  keycloak:
#    build: ./keycloak-script
#    image: jboss/keycloak
#    container_name: keycloak
#    deploy:
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 10
#        window: 120s
#    environment:
#      DB_VENDOR: MYSQL
#      DB_ADDR: mysql-keycloak
#      DB_PORT: 3306
#      DB_DATABASE: keycloak
#      DB_USER: keycloak
#      DB_PASSWORD: keycloak
##      KEYCLOAK_FRONTEND_URL: http://keycloak:8080/auth/
#      PROXY_ADDRESS_FORWARDING: "true"
#    ports:
#      - '8080:8080'
#    depends_on:
#      - mysql-keycloak
#    networks:
#      backend:
#        aliases:
#          - "keycloak"


  redisserver:
    image: redis:alpine
    container_name: redisServer
    ports:
      - 6379-6382:6379-6382
    networks:
      backend:
        aliases:
          - "redis"



#      ELK stack for logging and debugging
  elasticsearch:
    image: library/elasticsearch:7.7.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - my-db:/usr/share/elasticsearch/data
    ports:
#       Cluster communication
      - 9300:9300
#       REST communication
      - 9200:9200
    networks:
      backend:
        aliases:
          - "elasticsearch"
  kibana:
    image: elastic/kibana:7.7.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - 5601:5601
    networks:
      backend:
        aliases:
          - "kibana"
  logstash:
    image: elastic/logstash:7.7.0
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./ELK-stack-config/config:/etc/logstash/conf.d
    ports:
      - "6000:6000"
    networks:
      backend:
        aliases:
          - "logstash"
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    depends_on:
      - elasticsearch
    environment:
      - STORAGE_TYPE=elasticsearch
      - "ES_HOSTS=elasticsearch:9300"
    ports:
      - "9411:9411"
    networks:
      backend:
        aliases:
          - "zipkin"


# Service instances
#  sporteventservice:
#    build: ./sport_event_service
#    image: sport-event-service:latest
#    container_name: sport-event-service
#    deploy:
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#        window: 120s
#    environment:
#      PROFILE: "dev"
#      CONFIGSERVER_URI: "http://configserver:7071"
#      CONFIGSERVER_PORT:   "7071"
#      DATABASESERVER_PORT: "5000"
#    depends_on:
#      - postgres_database
#      - configserver
##      - kafkaserver
#    ports:
#      - "7000:7000"
#    networks:
#      backend:
#        aliases:
#          - "sporteventservice"
##
  sportorganizationeventcreatedepartmentservice:
    build: ./sport-organization-event-create-department-service
    image: sport-organization-event-create-department-service:latest
    container_name: sport-organization-event-create-department-service
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:7071"
      CONFIGSERVER_PORT:   "7071"
      DATABASESERVER_PORT: "5001"
    depends_on:
      - postgres_database
      - configserver
      - kafka
    ports:
      - "7001:7001"
    networks:
      backend:
        aliases:
        - "sportorganizationeventcreatedepartmentservice"
  eventrequestservice:
    build: event-request-service
    image: event-request-service:latest
    container_name: event-request-service
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:7071"
      logstash: 'logstash'
      configserver: 'configserver'
      eurekaserver: 'eurekaserver'
      postgres_database: 'postgres_database'
      zookeeper: 'zookeeper'
      kafka: 'kafka'
      redisserver: 'redisserver'
      zipkin: 'zipkin'
      CONFIGSERVER_PORT: "7071"
      DATABASESERVER_PORT: "5001"
    depends_on:
      - postgres_database
      - configserver
      - kafka
    ports:
      - "7003:7003"
    networks:
      backend:
        aliases:
          - "eventrequestservice"

networks:
  backend:
    driver: bridge
  keycloak:
    driver: bridge
volumes:
  my-db:
    driver: local

